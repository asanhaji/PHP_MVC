<?php

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 1. getInstance();
// 2. connection to PDO
// 2.1. connect_db();
// 2.2. getPDO();
// 3. create();
// 4. read();
// 5. update();
// 6. delete();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Database {

  private static $_instance = null;
  private static $_PDO = null;

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // NUMBER 1 => Instance
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public static function getInstance()
  {
    if (is_null(self::$_instance)) {
      self::$_instance = new Database();
    }
    return self::$_instance;
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // NUMBER 2 => Connection to PDO
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


  function connect_db($host, $user, $pass, $port, $db)
  {
    try {
      self::$_PDO = new PDO("mysql:host=$host;dbname=$db;port=$port", $user, $pass);
    } catch (PDOException $e) {
      $error = $e->getMessage();
      echo "Database error ".$error."\n";
      die();
      return null;
    }
  }
  public function getPDO()
  {
    if (!isset(self::$_PDO)) {
      $this->connect_db(DATABASE['host'], DATABASE['user'], DATABASE['password'], DATABASE['port'], DATABASE['name']);
    }
    return self::$_PDO;
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // NUMBER 3 => Creation
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public function create($tablename, $tab) {
    $columns = "";
    $values = "";

    $i = 0;
    foreach($tab as $key => $value) {
      $columns = "$columns `$key`,";
      $values = "$values :value$i,";
      ++$i;
    }
    $columns = rtrim($columns, ',');
    $values = rtrim($values, ',');
    $sql = "INSERT INTO `$tablename` ($columns) VALUES ($values)";
    $pdoStatement = Database::getInstance()->getPDO()->prepare($sql);
    $i = 0;
    foreach($tab as $key => $value) {
      $pdoStatement->bindValue(":value$i", $value);
      ++$i;
    }

    $test = $pdoStatement->execute();
    $count = $pdoStatement->rowCount();
    if ($count == 1) {
      return true;
    }
    else {
      return false;
    }
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // NUMBER 4 => Read
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public function read($tablename, $selection, $tab = null) {
    if ($tab == null)
      return Database::getInstance()->getPDO()->query("SELECT $selection FROM `$tablename`")->fetchAll();
    else {
      $conditions = "";
      $i = 0;
      foreach($tab as $key => $value) {
        $conditions = "$conditions $key = :value$i AND";
        $i++;
      }
      $conditions = rtrim($conditions, "AND");
      if($selection == "*")
        $sql = "SELECT $selection FROM `$tablename` WHERE $conditions";
      else
        $sql = "SELECT `$selection` FROM `$tablename` WHERE $conditions";
      $pdoStatement = Database::getInstance()->getPDO()->prepare($sql);
      $i = 0;
      foreach($tab as $key => $value) {
        $pdoStatement->bindValue(":value$i", $value);
        $i++;
      }
      $exec = $pdoStatement->execute();
      if ($exec == FALSE) {
        return NULL;
      }
      $result = $pdoStatement->fetchAll(PDO::FETCH_ASSOC);
      return $result;
    }
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // NUMBER 5 => Update
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public function update($tablename, $field, $val, $tab) {
    $set = "";
    $i = 0;
    foreach($tab as $key => $value) {
      $set = "$set $key = :value$i,";
      $i++;
    }
    $set = rtrim($set, ',');

    $sql = "UPDATE `$tablename` SET $set WHERE `$field` = :criteria";
    $pdoStatement = Database::getInstance()->getPDO()->prepare($sql);
    $pdoStatement->bindValue(':criteria', $val);
    $i = 0;
    foreach($tab as $key => $value) {
      $pdoStatement->bindValue(":value$i", $value);
      $i++;
    }
    $count = $pdoStatement->execute();

    return $count;
  }

  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  // NUMBER 6 => Delete
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

  public function delete($tablename, $tab = null){
    $set = "`";
    $equal = "`='";
    $end = "', `";
    $i = 0;
    foreach($tab as $key => $value){
      if($i == count($tab)-1){
        $end = "'";
      }
      $set = $set . $key . $equal;
      $set = $set . $value . $end;
      $i++;
    }
    $sql = "DELETE FROM `$tablename` WHERE $set";
    $pdoStatement = Database::getInstance()->getPDO()->prepare($sql);
    $pdoStatement->execute();
    $count = $pdoStatement->rowCount();
    if ($count == 1) {
      return true;
    }
    else {
      return false;
    }
  }
}


//$toto = Database::getInstance()->create('users', $array);
?>
